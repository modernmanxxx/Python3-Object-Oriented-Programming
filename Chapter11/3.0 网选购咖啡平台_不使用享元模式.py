class 咖啡(object):
    名称 = ''
    price = 0

    def __init__(self, 名称):
        self.名称 = 名称
        # 在实际业务中，咖啡价格应该是由配置表进行配置，或者调用接口获取等方式得到，此处为说明享元模式，将咖啡价格定为名称长度，只是一种简化
        self.price = len(名称)

    def show(self):
        print("咖啡名:%s 价格:%s" % (self.名称, self.price))


class 顾客(object):
    名称 = ""

    def __init__(self, 名称):
        self.名称 = 名称

    def 订购(self, 咖啡名):
        print ("%s 订购订购了一杯咖啡:%s" % (self.名称, 咖啡名))
        return 咖啡(咖啡名)

"""
按照一般的处理流程，用户在网上预订咖啡，其代表用户的Customer类中生成一个Coffee类，直到交易流程结束,整个流程是没有问题的。
如果，随着网站用户越来越多，单位时间内购买咖啡的用户也越来越多，并发量越来越大，对系统资源的消耗也会越来越大，
极端情况下，会造成宕机等严重后果。此时，高效利用资源，就显得非常重要了
"""
if __name__ == "__main__":
    客户1 = 顾客("客户1")
    客户2 = 顾客("顾客2")
    客户3 = 顾客("顾客3")

    客户1.订购("雀巢")


    客户2.订购("雀巢")
 

    客户3.订购("猫屎")


